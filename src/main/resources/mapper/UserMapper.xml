<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.qydata.mapper.UserMapper">


    <resultMap type="User" id="userMap">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="username" property="username"/>
        <result column="tel" property="tel"/>
        <result column="status" property="status"/>
        <result column="createTime" property="createTime"/>
        <result column="typeId" property="typeId"/>
    </resultMap>

    <resultMap type="User" id="userDeptMap" extends="userMap">
        <collection property="dept" ofType="Dept">
            <result column="deptNo" property="deptNo"/>
            <result column="deptName" property="deptName"/>
        </collection>
    </resultMap>

    <!-- 是进行登录认证使用的，即，根据身份信息取得密码进行认证 -->
    <select id="findById" parameterType="String" resultType="User">
        SELECT username,password
        FROM qyauth.User
        WHERE username=#{username} and status=0
    </select>
    <!-- 根据用户名查询出该用户对用的所有角色的标记名称（千万不要用中文） -->
    <select id="findAllRoleByUser" parameterType="String" resultType="String">
        SELECT flag
        FROM qyauth.Role
        WHERE id IN (
                      SELECT roleId
                      FROM qyauth.UserRole
                      WHERE username=#{username})
    </select>
    <!-- 查询出一个用户对应的所有权限数据 -->
    <select id="findAllActionByUser" parameterType="String" resultType="String">
        SELECT flag
        FROM qyauth.Action
        WHERE id IN (
                        SELECT actionId
                        FROM qyauth.RoleAction
                        WHERE roleId IN (
                                      SELECT roleId
                                      FROM qyauth.UserRole
                                      WHERE username=#{username}))
    </select>
    <!--添加管理员-->
    <insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into qyauth.User(name,username,password,tel,status,typeId,createTime)
        values(#{name},#{username},'123456',#{tel},#{status},#{typeId},sysdate())
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <!--Common添加管理员-->
    <insert id="addUserCommon" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into qyauth.User(name,username,password,tel,status,typeId,createTime)
        values(#{name},#{username},'123456',#{tel},#{status},2,sysdate())
        <selectKey keyProperty="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <!--根据用户名和旧密码修改密码-->
    <update id="updatePassword" parameterType="Map">
        update qyauth.User set password=#{newPassword}
        where username=#{username} and password=#{password}
    </update>
    <!--重置密码-->
   <update id="resetPassword" parameterType="String">
       update qyauth.User set password='123456'
       where username=#{username}
   </update>
    <!--查找全部用户-->
    <select id="findAllUser" parameterType="Map" resultMap="userDeptMap">
        select u.id,u.name,u.username,u.tel,u.status,u.createTime,d.deptNo,d.deptName
        from qyauth.User u left join qyauth.UserDept ud on u.id=ud.userId left join qyauth.Dept d on
        ud.deptNo=d.deptNo
        <where>
            <if test="deptNoList!=null and deptNoList.size()!=0">
                and d.deptNo in
                <foreach collection="deptNoList" item="deptNo"
                         index="index" open="(" close=")" separator=",">
                    #{deptNo}
                </foreach>
            </if>
            <if test="content!=null and content!=''">
                and (u.name like '%${content}%' or u.username like '%${content}%'
                or u.tel like '%${content}%' or u.status like '%${content}%'
                or d.deptNo like '%${content}%' or d.deptName like '%${content}%')
            </if>
        </where>
        order by u.createTime desc
        limit #{beginIndex},#{lineSize}
    </select>
    <!--统计数据量-->
    <select id="getAllCount" parameterType="Map" resultType="Integer">
        select count(u.id)
        from qyauth.User u left join qyauth.UserDept ud on u.id=ud.userId left join qyauth.Dept d on
        ud.deptNo=d.deptNo
        <where>
            <if test="deptNoList!=null and deptNoList.size()!=0">
                and d.deptNo in
                <foreach collection="deptNoList" item="deptNo"
                         index="index" open="(" close=")" separator=",">
                    #{deptNo}
                </foreach>
            </if>
            <if test="content!=null and content!=''">
                and (u.name like '%${content}%' or u.username like '%${content}%'
                or u.tel like '%${content}%' or u.status like '%${content}%'
                or d.deptNo like '%${content}%' or d.deptName like '%${content}%')
            </if>
        </where>
    </select>
    <!--根据用户名查找指定用户信息-->
    <select id="findUserByUsername" parameterType="String" resultMap="userDeptMap">
        select u.id,u.name,u.username,u.tel,u.status,u.createTime,u.typeId,d.deptNo,d.deptName
        from qyauth.User u left join qyauth.UserDept ud on u.id=ud.userId left join qyauth.Dept d on
        ud.deptNo=d.deptNo
        where u.username=#{username}
    </select>

    <!--启动账号-->
    <update id="updateStatusStart" parameterType="java.lang.String">
        update qyauth.User set status=0 where username=#{value}
    </update>
    <!--禁用账号-->
    <update id="updateStatusforbid" parameterType="java.lang.String">
        update qyauth.User set status=1 where username=#{value}
    </update>
</mapper>